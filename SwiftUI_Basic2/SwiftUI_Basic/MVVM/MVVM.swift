// MVVM

// Model : 앱의 데이터와 비즈니스 로직을 캡슐화 / 뷰와 독립적
// ViewModel : View와 Model 사이 중재자로, 로직을 정의하고 View에는 데이터를 제공, Model에는 업데이트 요청
// View : 앱 화면에 시각적 요소들을 사용해 UI를 정의함

// 장점
// - 개발 단계에서 UI 화면구성(View), 앱의 로직(ViewModel)을 나눠서 작업 가능
// - UI 코드를 분리해 순수하게 앱의 기능과 로직에 집중해서 테스트 진행 가능

// 단점
// - 적절하게 일반화된 ViewModel을 초기 설계하기 쉽지 않음
// - Model 데이터를 ViewModel에서 다시 작성함에 따라 추가 코드 발생



// @ObservedObject

// - 객체화를 만들어서 내부에 일어나는 변화를 기반으로 어떻게 화면을 다시 그리는지 보여줌
// - 새로 고침되면 일부 애니메이션이 있기 때문에 값이 새로 고침이 됨
// - 이미 객체화 된것을 넘겨 받고 나서 사용



// @StateObject

// - 하나의 객체로 만들어지고, View가 얼마나 초기화 되는지 상관없이 별개의 객체 관리
// - View와 별개의 메모리 공간에 저장해 데이터를 안전하게 보관
// - 객체 처음 초기화 할때 사용
